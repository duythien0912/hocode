cw-2:
  algorithms:
    initial: |-
      # return the two oldest/oldest ages within the array of ages passed in.
      # it should return the two ages as a sorted array, youngest age first
      twoOldestAges = (ages) ->

    answer: |-
      twoOldestAges = (ages) ->
        oldest = 0
        nextOldest = 0;
        for age in ages
          if age > oldest
            nextOldest = oldest
            oldest = age
          else if age > nextOldest
            nextOldest = age
        [nextOldest, oldest]

    fixture: |-
      Test.describe "twoOldestAges([1,5,87,45,8,8])", ->
        results1 = twoOldestAges [1,5,87,45,8,8]
        Test.it "Should return something that isn't falsy", ->
          Test.expect results1, "Something is wrong, twoOldestAges([1,5,87,45,8,8]) has no results!"
        Test.it "Should return [45,87]", ->
          Test.assertEquals results1[0], 45, "twoOldestAges([1,5,87,45,8,8]) should return 45 as the second highest result"
          Test.assertEquals results1[1], 87, "twoOldestAges([1,5,87,45,8,8]) should return 87 as the second highest result"

      Test.describe "twoOldestAges([6,5,83,5,3,18])", ->
        results2 = twoOldestAges [6,5,83,5,3,18]
        Test.assertSimilar results2, [18, 83]

  bug fixes:
    initial: |-
      class Person
        constructor: (@name) ->

        #TODO: The greet function is not returning the expected value.
        greet: -> "Hello my name is #{name}"

    answer: |-
      class Person
        constructor: (@name) ->

        greet: -> "Hello my name is #{@name}"

    fixture: |-
      jack = new Person "Jack"
      jill = new Person "Jill"

      Test.expect jack.name == "Jack", "person.name property does have have a valid value"

      Test.expect jack.greet() == "Hello my name is Jack"
      Test.expect jill.greet() == "Hello my name is Jill"

  refactoring:
    initial: |-
      # TODO: This method needs to be called multiple times for the same person (myName).
      # It would be nice if we didnt have to always pass in myName every time we needed to great someone.

      greet = (myName, yourName) -> "Hello #{yourName}, my name is #{myName}"

    answer: |-
      class Person
        constructor: (@name) ->

        greet: (yourName) ->
          "Hello #{yourName}, my name is #{@name}"

    fixture: |-
        jack = new Person "Jack"
        jill = new Person "Jill"

        Test.expect jack.greet("Jill") == "Hello Jill, my name is Jack"
        Test.expect jack.greet("Mary") == "Hello Mary, my name is Jack"

        Test.expect jill.greet("Jack") == "Hello Jack, my name is Jill"

  reference:
    initial: |-
      websites = []

    answer: |-

      # add the values "codewars" to the websites array
      websites = ["codewars"]

    fixture: |-
      Test.expect(websites.length > 0, 'The array is still empty')
      Test.expect(websites.length == 1, 'The array contains too many values')
      Test.expect(websites[0] == 'codewars', 'The array does not contain the correct value "codewars"')
