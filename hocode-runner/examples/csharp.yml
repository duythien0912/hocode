nunit:
  algorithms:
    initial: |-
      namespace Bank {
        using System;
        public class Account
        {
          private decimal balance;
          public void Deposit(decimal amount)
          {
          }

          public void Withdraw(decimal amount)
          {
          }

          public void TransferFunds(Account destination, decimal amount)
          {
          }

          public decimal Balance { get { return balance; } }
        }
      }

    answer: |-
      namespace Bank {
        using System;
        public class Account
        {
          private decimal balance;
          public void Deposit(decimal amount)
          {
            balance += amount;
          }

          public void Withdraw(decimal amount)
          {
            balance -= amount;
          }

          public void TransferFunds(Account destination, decimal amount)
          {
            destination.Deposit(amount);
            this.Withdraw(amount);
          }

          public decimal Balance { get { return balance; } }
        }
      }

    fixture: |-
      namespace Bank {
        using NUnit.Framework;
        using System;
        [TestFixture]
        public class AccountTest
        {
          [Test]
          public void TransferFunds()
          {
            Account source = new Account();
            source.Deposit(200m);
            Account destination = new Account();
            destination.Deposit(150m);
            source.TransferFunds(destination, 100m);
            Assert.AreEqual(250m, destination.Balance);
            Assert.AreEqual(100m, source.Balance);
          }

          [Test]
          public void CheckFunds()
          {
            Account source = new Account();
            source.Deposit(200m);
            Account destination = new Account();
            destination.Deposit(150m);
            Assert.AreEqual(200m, source.Balance);
          }
        }
      }