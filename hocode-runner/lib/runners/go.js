"use strict";

const writeFileSync = require('../utils/write-file-sync');

module.exports = {
  solutionOnly(opts, runCode) {
    runCode({
      name: 'go',
      args: ['run', writeFileSync('home/codewarrior', 'code.go', opts.solution)]
    });
  },

  testIntegration(opts, runCode) {
    const pkgName = getPackageName(opts.solution);
    const name = pkgName[0].toUpperCase() + pkgName.slice(1);
    const dir = `home/codewarrior/go/src/codewarrior/${pkgName}`;
    writeFileSync(dir, 'solution.go', opts.solution);
    if (opts.setup) writeFileSync(dir, 'setup.go', opts.setup);
    writeFileSync(dir, `${pkgName}_test.go`, opts.fixture);
    writeFileSync(dir, `${pkgName}_suite_test.go`, [
      `package ${pkgName}_test`,
      'import (',
      '  . "github.com/onsi/ginkgo"',
      '  . "github.com/onsi/gomega"',
      '  "testing"',
      '  "codewars/reporter"',
      ')',
      '',
      `func Test${name}(t *testing.T) {`,
      '  RegisterFailHandler(Fail)',
      `  RunSpecsWithCustomReporters(t, "${name} Test", []Reporter{reporter.New()})`,
      '}'
    ].join('\n'));

    runCode({
      name: 'go',
      args: ['test'],
      options: {
        cwd: dir,
        env: Object.assign({}, process.env, {
          // append the directory to $GOPATH so the test can
          // use the import path "codewarrior/pakage" for arbitrary package name
          GOPATH: `${process.env.GOPATH}:/home/codewarrior/go`
        })
      }
    });
  },

  // remove last few lines generated by 'testing'
  // PASS
  // ok  	{dirname of test file}	{seconds}s
  //
  // --- FAIL: {Test Suite} ({seconds}s)
  // FAIL
  // exit status 1
  // FAIL	{dirname of test file}	{seconds}s
  sanitizeStdOut(opts, stdout) {
    // special case when build failed
    if (stdout.includes('[build failed]')) return '\n<ERROR::>Build Failed\n';
    const ss = stdout.split('\n'), n = ss.length;
    for (let i = n - 1; i >= 0; --i) {
      const s = ss[i];
      if (s == 'PASS' || s.startsWith('--- FAIL'))
        return ss.slice(0, i).join('\n') + '\n';
    }
    return stdout;
  }
};

function getPackageName(code) {
  const m = code.match(/^package\s+([a-z][a-z\d]*)\s*$/m);
  if (m === null) throw new Error("Failed to extract package name. A package name MUST be lowercased.");
  return m[1];
}
