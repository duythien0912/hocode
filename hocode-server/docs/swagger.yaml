basePath: /api/v1
definitions:
  model_BodyUC:
    properties:
      course_id:
        type: string
      minitask_id:
        type: string
      task_id:
        type: string
    type: object
  model_Book:
    properties:
      content:
        type: string
      del:
        type: boolean
      id:
        type: string
      image:
        type: string
      timestamp:
        type: string
      title:
        type: string
    type: object
  model_Course:
    properties:
      background_image:
        type: string
      course_name:
        type: string
      del:
        type: boolean
      id:
        type: string
      task_solved:
        $ref: '#/definitions/model_TaskSolved'
        description: Name            string     json:"name" bson:"name"
        type: object
      tasks:
        items:
          $ref: '#/definitions/model_Task'
        type: array
      timestamp:
        type: string
    type: object
  model_CourseInfo:
    properties:
      background_image:
        type: string
      completed_tasks_count:
        type: integer
      course_id:
        type: string
      course_name:
        type: string
      pass_course:
        type: boolean
      todo_tasks_count:
        type: integer
      total_tasks_count:
        type: integer
    type: object
  model_Event:
    properties:
      content:
        type: string
      del:
        type: boolean
      id:
        type: string
      image:
        type: string
      link:
        type: string
      timestamp:
        type: string
      title:
        type: string
    type: object
  model_Input:
    properties:
      type:
        type: string
      value:
        type: string
    type: object
  model_MiniTask:
    properties:
      avatar:
        type: string
      code_point:
        type: integer
      del:
        type: boolean
      id:
        type: string
      level:
        type: string
      mini_task_desc:
        type: string
      mini_task_name:
        type: string
      name_func:
        type: string
      output_type_func:
        type: string
      point_unlock:
        type: integer
      status:
        type: string
      task_id:
        type: string
      template_code:
        type: string
      timestamp:
        type: string
      unit_tests:
        items:
          $ref: '#/definitions/model_UnitTest'
        type: array
      vitri:
        type: boolean
    type: object
  model_MiniTaskInfo:
    properties:
      minitask_id:
        type: string
      status:
        type: string
    type: object
  model_Task:
    properties:
      background_image:
        type: string
      course_id:
        type: string
      del:
        type: boolean
      id:
        type: string
      minitasks:
        items:
          $ref: '#/definitions/model_MiniTask'
        type: array
      task_name:
        type: string
      timestamp:
        type: string
    type: object
  model_TaskSolved:
    properties:
      task_count:
        description: ID            bson.ObjectId json:"id" bson:"_id,omitempty"
        type: integer
      tasks_complete:
        type: integer
      timestamp:
        type: string
    type: object
  model_UnitTest:
    properties:
      expected_output:
        type: string
      inputs:
        description: ID             bson.ObjectId json:"id" bson:"_id,omitempty"
        items:
          $ref: '#/definitions/model_Input'
        type: array
    type: object
  model_User:
    properties:
      avatar:
        type: string
      codepoint:
        type: integer
      del:
        type: boolean
      email:
        type: string
      firstname:
        type: string
      id:
        type: string
      lastname:
        type: string
      password:
        type: string
      timestamp:
        description: Company []company      json:"company,omitempty" bson:"company,omitempty"
        type: string
      token:
        type: string
    type: object
  model_UserCourse:
    properties:
      course_info:
        items:
          $ref: '#/definitions/model_CourseInfo'
        type: array
      del:
        type: boolean
      id:
        type: string
      timestamp:
        type: string
      user_id:
        type: string
    type: object
  model_UserCourseOut:
    properties:
      next_minitask:
        $ref: '#/definitions/model_MiniTask'
        type: object
      user_course:
        $ref: '#/definitions/model_UserCourse'
        type: object
      user_minitask:
        $ref: '#/definitions/model_UserMiniTask'
        type: object
    type: object
  model_UserMiniTask:
    properties:
      course_info:
        items:
          $ref: '#/definitions/model_MiniTaskInfo'
        type: array
      del:
        type: boolean
      id:
        type: string
      timestamp:
        type: string
      user_id:
        type: string
    type: object
host: hocode.appspot.com
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a server Api Hocode.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Hocode API
  version: "1.0"
paths:
  /auth/updateusercourse:
    post:
      consumes:
      - application/json
      description: UpdateUserCourse
      parameters:
      - description: UpdateUserCourse
        in: body
        name: course
        required: true
        schema:
          $ref: '#/definitions/model_BodyUC'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model_UserCourseOut'
            type: object
      summary: UpdateUserCourse
      tags:
      - UserCourse
  /auth/usercourse:
    get:
      consumes:
      - application/json
      description: get GetUserCourse
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model_UserCourse'
            type: object
      summary: List GetUserCourse
      tags:
      - UserCourse
  /books:
    get:
      consumes:
      - application/json
      description: get books <a href="/api/v1/books?page=1&limit=5">/api/v1/books?page=1&limit=5</a>
      operationId: book_list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model_Book'
            type: array
      summary: List Books
      tags:
      - Books
  /courses:
    get:
      consumes:
      - application/json
      description: get courses <a href="/api/v1/courses?page=1&limit=5">/api/v1/courses?page=1&limit=5</a>
      operationId: course_list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model_Course'
            type: array
      summary: List Courses
      tags:
      - Courses
    post:
      consumes:
      - application/json
      description: Create Course
      parameters:
      - description: Create Course
        in: body
        name: course
        required: true
        schema:
          $ref: '#/definitions/model_Course'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model_Course'
            type: object
      summary: Create Course
      tags:
      - Courses
  /courses/{id}:
    get:
      consumes:
      - application/json
      description: get courses by ID <a href="/courses/5d86e07bfe6e2b157bd3b259">/courses/5d86e07bfe6e2b157bd3b259</a>
      parameters:
      - description: Course ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model_Course'
            type: object
      summary: Get Course By ID
      tags:
      - Courses
  /courses/{id}/tasks:
    get:
      consumes:
      - application/json
      description: Get Task By Courses ID <a href="/api/v1/courses/5d86e07bfe6e2b157bd3b259/tasks">/api/v1/courses/5d86e07bfe6e2b157bd3b259/tasks</a>
      parameters:
      - description: Course ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model_Task'
            type: array
      summary: Get Task By Courses ID
      tags:
      - Courses
  /createbook:
    post:
      consumes:
      - application/json
      description: Create Book
      parameters:
      - description: Create Book
        in: body
        name: course
        required: true
        schema:
          $ref: '#/definitions/model_Book'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model_Book'
            type: object
      summary: Create Book
      tags:
      - Books
  /createevent:
    post:
      consumes:
      - application/json
      description: Create Event
      parameters:
      - description: Create Event
        in: body
        name: course
        required: true
        schema:
          $ref: '#/definitions/model_Event'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model_Event'
            type: object
      summary: Create Event
      tags:
      - Events
  /events:
    get:
      consumes:
      - application/json
      description: get events <a href="/api/v1/events?page=1&limit=5">/api/v1/events?page=1&limit=5</a>
      operationId: event_list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model_Event'
            type: array
      summary: List Events
      tags:
      - Events
  /health_check:
    get:
      consumes:
      - application/json
      description: Health Check Server
      produces:
      - application/json
      responses:
        "200":
          description: Server Ok
          schema:
            type: string
      summary: Health Check Server
  /minitasks:
    get:
      consumes:
      - application/json
      description: get List Minitasks <a href="/api/v1/minitasks?page=1&limit=5">/api/v1/minitasks?page=1&limit=5</a>
      operationId: minitask_list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model_MiniTask'
            type: array
      summary: List Minitasks
      tags:
      - Minitasks
    post:
      consumes:
      - application/json
      description: Create MiniTask
      parameters:
      - description: Create MiniTask
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/model_MiniTask'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model_MiniTask'
            type: object
      summary: Create Minitast
      tags:
      - Minitasks
  /minitasks/{id}:
    get:
      consumes:
      - application/json
      description: get Minitasks by ID <a href="/api/v1/minitasks/5d995ae8fe6e2b0ca40b22fe">/api/v1/minitasks/5d995ae8fe6e2b0ca40b22fe</a>
      parameters:
      - description: Minitask ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model_MiniTask'
            type: object
      summary: Get Minitasks By ID
      tags:
      - Minitasks
  /tasks:
    get:
      consumes:
      - application/json
      description: get tasks <a href="/api/v1/tasks?page=1&limit=5">/api/v1/tasks?page=1&limit=5</a>
      operationId: task_list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model_Task'
            type: array
      summary: List Task
      tags:
      - Tasks
    post:
      consumes:
      - application/json
      description: Create Task
      parameters:
      - description: Create Task
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/model_Task'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model_Task'
            type: object
      summary: Create Task
      tags:
      - Tasks
  /tasks/{id}:
    get:
      consumes:
      - application/json
      description: get task by ID <a href="/api/v1/tasks/5d86f268fe6e2b31c0673b02">/api/v1/tasks/5d86f268fe6e2b31c0673b02</a>
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model_Task'
            type: object
      summary: Get Task By ID
      tags:
      - Tasks
  /users:
    get:
      consumes:
      - application/json
      description: get users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model_User'
            type: array
      summary: List users
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: delete accounts by ID
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Ok
          schema:
            type: string
      summary: Delete user
      tags:
      - users
    post:
      consumes:
      - application/json
      description: update accounts by ID
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update account
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/model_User'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model_User'
            type: object
      summary: Update user
      tags:
      - users
swagger: "2.0"
